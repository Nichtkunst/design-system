/*
 * Button shape
 */
.button-henlo {
	padding: em(5) em(16) em(6); // design want 34px height
	border: 1px solid var(--button-default-border-color, transparent);
	border-radius: $global-border-radius;
	background-color: var(--button-default-background-color, transparent);
	color: var(--button-default-text-color, inherit);
	transition: 0.15s easing(easeOutQuint), background-position 0s;

	&,
	&:hover,
	&:focus,
	&:focus-within,
	&:active {
		text-decoration: none;
	}

	&:hover,
	&:focus,
	&:focus-within,
	&.is-hover {
		border-color: var(--button-hover-border-color, transparent);
		background-color: var(--button-hover-background-color, transparent);
		color: var(--button-hover-text-color, inherit);
	}

	&:not(div):active,
	// not(div) prevents active state in case of button groups with dropdowns
	&.is-active {
		border-color: var(--button-active-border-color, transparent);
		background-color: var(--button-active-background-color, transparent);
		color: var(--button-active-text-color, inherit);
	}

	&[disabled],
	&.is-disabled {
		border-color: var(--button-disabled-border-color, transparent);
		background-color: var(--button-disabled-background-color, transparent);
		color: var(--button-disabled-text-color, inherit);
		opacity: 0.5;
		pointer-events: none;
	}

	&[aria-expanded='true'] .caret-like {
		@extend .rotateX-180;
	}
}

/*
 * Button variants
 */
@each $color in (norm, weak, danger, warning, success, info) {
	// Default shape
	.button-solid-#{$color} {
		--button-default-background-color: var(--interaction-#{$color});
		--button-default-text-color: var(--interaction-#{$color}-contrast);

		@each $state in (hover, active, disabled) {
			--button-#{$state}-background-color: var(
				--interaction-#{$color}-#{$state}
			);
			--button-#{$state}-text-color: var(
				--interaction-#{$color}-contrast
			);
		}
	}

	// Outline shape
	.button-outline-#{$color} {
		--button-default-border-color: var(--interaction-#{$color});

		@if $color == 'weak' {
			--button-default-text-color: var(--interaction-weak-contrast);
		} @else {
			--button-default-text-color: var(--interaction-#{$color});
		}

		@each $state in (hover, active, disabled) {
			--button-#{$state}-border-color: var(
				--interaction-#{$color}-#{$state}
			);

			@if $color == 'weak' {
				--button-#{$state}-text-color: var(--interaction-weak-contrast);
			} @else {
				--button-#{$state}-text-color: var(
					--interaction-#{$color}-#{$state}
				);
			}
		}
	}

	// Ghost shape
	.button-ghost-#{$color} {
		--button-default-background-color: transparent;

		@if $color == 'weak' {
			--button-default-text-color: var(--interaction-weak-contrast);
		} @else {
			--button-default-text-color: var(--interaction-#{$color});
		}

		@each $state in (hover, active) {
			--button-#{$state}-background-color: var(
				--interaction-#{$color}-#{$state}
			);
			--button-#{$state}-text-color: var(
				--interaction-#{$color}-contrast
			);
		}

		--button-disabled-background-color: transparent;

		@if $color == 'weak' {
			--button-disabled-text-color: var(--interaction-weak-contrast);
		} @else {
			--button-disabled-text-color: var(--interaction-#{$color}-disabled);
		}
	}
}

/*
 * Modifiers
 */

.button-small {
	padding: em(1) em(12) em(2); // design want 26px height
}

.button-large {
	padding: em(10) em(20) em(9); // design want 42px height
}

.button-for-icon {
	padding: em(8);

	&.button-small {
		padding: em(4);
	}

	&.button-large {
		padding: em(12);
	}

	svg {
		display: block;
	}
}

.button-pill {
	border-radius: 2em;
}

.button-link {
	padding-left: 0;
	padding-right: 0;
	border: none;
	background: none;
	color: var(--interaction-norm);
	text-decoration: underline;

	&:focus,
	&:hover {
		color: var(--interaction-norm-hover);
	}
	&:not(div):active,
	&:active {
		color: var(--interaction-norm-active);
	}

	&[disabled],
	&.is-disabled {
		color: var(--interaction-norm-disabled);
		pointer-events: none;
	}
}

/*
 * For select component
 */
.button-henlo.select {
	background-color: transparent;
	color: var(--text-norm);
	// height: $default-height-fields;

	.mauto {
		display: flex;
		width: 100%;
	}

	.mr0-5 {
		flex: 1 1 0px;
		@extend .text-ellipsis;
	}
}

/*
 * Button group
*/
.grouped-buttons {
	@extend .inline-flex;
	@extend .flex-nowrap;
}

.grouped-button {
	margin-right: -1px; // Border size
	border-radius: 0;

	&:hover,
	&:focus,
	&:active {
		position: relative;
	}
}

.grouped-buttons > .grouped-button:first-child {
	border-top-right-radius: 0;
	border-bottom-right-radius: 0;
}

.grouped-buttons > .grouped-button:last-child {
	border-top-left-radius: 0;
	border-bottom-left-radius: 0;
	margin-right: 0;
}
